import streamlit as st
from geopy.distance import geodesic
from pandas import read_csv, DataFrame
from классы import *
from перечни import *

черта = lambda x: ' | ' + x if x else ''

def Дистанция(вылет = 'UNWW', прилёт = 'UNNT'):
    В = КТА(вылет)
    П = КТА(прилёт)
    return int(geodesic(
        (В.широта, В.долгота),
        (П.широта, П.долгота)).km)

def Расстояние(аэродром = 'UNWW', широта=55, долгота=87):
    а = КТА(аэродром)
    return int(geodesic(
        (а.широта, а.долгота),
        (широта, долгота)).km)

def КТА(аэродром="UNWW"):
    возврат = None
    d = None
    try:
        d = read_csv('../csv/aopa-points-export.csv', sep=';', index_col='Индекс')
        возврат = К(
            d.loc[аэродром]['Широта КТА'],
            d.loc[аэродром]['Долгота КТА'],
            d.loc[аэродром]['Превышение'])
    except:
        print('[ОШИБКА] Проверить файл aopa-points-export.csv')
    finally:
        del d
        return возврат

def Расчёт_агломерации(аэродром='UNWW', радиус=100):
    возврат = None
    d = read_csv('../csv/data.csv')
    a = []
    return возврат

def Агломерация(
        аэродром = 'UNWW',
        радиус = 100):   
    возврат = None
    a = None
    if радиус == 100:
        a = read_csv('../csv/Агломерация.csv', index_col='ICAO')
        возврат = a.loc[аэродром]['Агломерация']
    else:
        d = read_csv('../csv/data.csv', index_col='id')
        кта = КТА(аэродром=аэродром)
        ШВ = кта.широта + 1
        ШН = кта.широта - 1
        ДЗ = кта.долгота - 1
        ДВ = кта.долгота + 1

    del a
    return возврат

def АПН(аэродром = 'UNWW', КУА=2.5, КАН=4.2):
    """
    Функция возвращает коэффициент авиационной подвижности
    для определённого вида аэрорта.
    Для узлового аэропорта коэффициен равен 2.5
    Для аэропорта назначения равен 4.2
    """
    возврат = None
    s = None
    s = read_csv('../csv/Сводка.csv', index_col='ICAO')
    if s.loc[аэродром]['Вид'] == "УА": возврат = КУА
    elif s.loc[аэродром]['Вид'] == "АН": возврат = КАН
    else:
        ...
    del s
    return возврат

def Город(аэродром='UNWW'):
    возврат = ''
    try:
        a = read_csv('../csv/aopa-points-export.csv', sep=';', index_col='Индекс')
        возврат = a.loc[аэродром]['Город']
        if isinstance(возврат, float): возврат = ''
        else: ...
        del a
    except: print('[ОШИБКА] Проверить файл aopa-points-export.csv')
    finally: ...
    return возврат

def Название(аэродром='UNWW'):
    возврат = ''
    try:
        a = read_csv('../csv/aopa-points-export.csv', sep=';', index_col='Индекс')
        возврат = a.loc[аэродром]['Название']
        del a
    except:
        print('[ОШИБКА] Проверить файл aopa-points-export.csv')
    finally:
        ...
    return возврат    

def IATA(аэродром='UNWW'):
    возврат = ''
    try:
        d = read_csv('../csv/IATA.csv', index_col='icao')
        возврат = d.loc[аэродром]['iata']
    except:
        print('[ОШИБКА] Проверить файл IATA.csv')
    finally:
        del d
        return возврат

def Наименование(аэродром='UNWW'):
    возврат = ''
    возврат = аэродром + черта(IATA(аэродром)) + черта(Город(аэродром)) + черта(Название(аэродром))
    return возврат

def Перечень_МАЛ():
    возврат = []
    d = read_csv('../csv/Сводка.csv', index_col='ICAO')
    for _ in d.index: возврат.append(Наименование(_))
    del d
    return возврат

def Перечень_ЮВК():
    возврат = []
    d = read_csv('../csv/Сводка.csv', index_col='ICAO')
    for _ in d[d.ВК == 1].index:
        возврат.append(Наименование(_))
    del d
    return возврат

def Перечень_СВК():
    возврат = []
    d = read_csv('../csv/Сводка.csv', index_col='ICAO')
    for _ in d[d.ВК == 2].index:
        возврат.append(Наименование(_))
    del d
    return возврат

def Перечень_ЦВК():
    возврат = []
    d = read_csv('../csv/Сводка.csv', index_col='ICAO')
    for _ in d[d.ВК == 3].index:
        возврат.append(Наименование(_))
    del d
    return возврат

def Перечень_УА():
    возврат = []
    d = read_csv('../csv/Сводка.csv', index_col='ICAO')
    for _ in d[d.Вид == "УА"].index:
        возврат.append(Наименование(_))
    del d
    return возврат

def Перечень_АН():
    возврат = []
    d = read_csv('../csv/Сводка.csv', index_col='ICAO')
    for _ in d[d.Вид == "АН"].index:
        возврат.append(Наименование(_))
    del d
    return возврат

def УА(аэродром="UNWW", перечень=перечень_УА):
    возврат = False
    for _ in перечень:
        if аэродром == _[:4]: возврат = True
    return возврат

def АН(аэродром="UNWW", перечень=перечень_АН):
    возврат = False
    for _ in перечень:
        if аэродром == _[:4]: возврат = True
    return возврат

def Вид(аэродром="UNWW"):
    возврат = ""
    if АН(аэродром): возврат = "АН"
    elif УА(аэродром): возврат = "УА"
    else: ...
    return возврат

def Перечень_городов_в_csv(аэродром='UNWW', df=DataFrame(), радиус=100):
    путь = '../csv/Города/' + аэродром + '_' + str(радиус) +'_перечень_городов.csv'
    df.to_csv(путь,index=False)
    return None

def Перечень_аэродромов_в_csv(аэродром='UNWW', df=DataFrame(), радиус=1000):
    путь = '../csv/Аэродромы/' + аэродром + '_' + str(радиус) +'_перечень_аэродромов.csv'
    df.to_csv(путь,index=False)
    return None

@st.cache_data
def Перечень_городов(аэродром='UNWW', радиус=100):
    возврат = []
    дистанция = 0
    кта = КТА(аэродром)
    ШС = кта.широта + 1
    ШЮ = кта.широта - 1
    ДЗ = кта.долгота - 1
    ДВ = кта.долгота + 1
    d = read_csv('../csv/data.csv', index_col='id')
    набор = d[(d.latitude_dd < ШС) & (d.latitude_dd > ШЮ) & (d.longitude_dd > ДЗ) & (d.longitude_dd < ДВ)]
    for _ in набор.index:
        дистанция = Расстояние(аэродром, набор.loc[_]['latitude_dd'], набор.loc[_]['longitude_dd'])
        if дистанция <= радиус:
            запись = {
                "регион": набор.loc[_]['region'],
                "район": набор.loc[_]['municipality'],
                "город": набор.loc[_]['settlement'],
                "тип": набор.loc[_]['type'],
                "население": int(набор.loc[_]['population']),
                "широта": набор.loc[_]['latitude_dd'],
                "долгота": набор.loc[_]['longitude_dd'],
                "расстояние": дистанция 
            }
            возврат.append(запись)
    return DataFrame(возврат)

@st.cache_data
def Перечень_аэродромов(аэродром='UNWW', радиус=1000):
    возврат = []
    дистанция = 0
    кта = КТА(аэродром)
    ШС = кта.широта + (радиус/10)
    ШЮ = кта.широта - (радиус/10)
    ДЗ = кта.долгота - (радиус/10)
    ДВ = кта.долгота + (радиус/10)
    d = read_csv('../csv/aopa-points-export.csv',sep=';', index_col='Индекс')
    s = read_csv('../csv/Сводка.csv', index_col='ICAO')
    # набор = d[(d['Широта КТА'] < ШС) & (d['Широта КТА'] > ШЮ) & (d['Долгота КТА'] > ДЗ) & (d['Долгота КТА'] < ДВ)]
    for _ in перечень_МАЛ:
        дистанция = Расстояние(аэродром, d.loc[_[:4]]['Широта КТА'], d.loc[_[:4]]['Долгота КТА'])
        if дистанция <= радиус:
            запись = {
                "ICAO": _[:4],
                "Широта": d.loc[_[:4]]['Широта КТА'],
                "Долгота": d.loc[_[:4]]['Долгота КТА'],
                "Превышение": d.loc[_[:4]]['Превышение'],
                "Расстояние": дистанция,
                "Коридор": s.loc[_[:4]]['ВК'],
                "Вид": s.loc[_[:4]]['Вид'],
                "Кандидат": s.loc[_[:4]]['Кандидат'],
                "Пассажиропоток": s.loc[_[:4]]['Пассажиропоток'],
                "Грузопоток": s.loc[_[:4]]['Груз, тонн'],
                "Почта": s.loc[_[:4]]['Почта, тонн'],
                "Керосин": s.loc[_[:4]]['Цена ТС-1, руб'],
                "Категория": s.loc[_[:4]]['Категория']
            }
            возврат.append(запись)
    del d
    return DataFrame(возврат)

@st.cache_data
def Города_аэродромов(радиус=100):
    """Функция формирует csv-файлы в каталоге ../csv
    в которые входят списки близлежащих населённых пунктов
    с координатами, жителями и расстоянием от КТА"""
    for _ in перечень_МАЛ:
        df = Перечень_городов(аэродром=_[:4], радиус=радиус)
        Перечень_городов_в_csv(аэродром=_[:4], df=df, радиус=радиус)
    return None

@st.cache_data
def Аэродромы_аэродромов(радиус=1000):
    """Функция формирует csv-файлы в каталоге ../csv/Аэродромы
    в которые входят списки близлежащих аэропортов в зоне ответственности
    аэродрома с координатами и расстоянием от КТА"""
    for _ in перечень_МАЛ:
        df = Перечень_аэродромов(аэродром=_[:4], радиус=радиус)
        Перечень_аэродромов_в_csv(аэродром=_[:4], df=df, радиус=радиус)
    return None