import streamlit as st
import time

st.header('–≠–ª–µ–º–µ–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞')
st.text('–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞.')
st.text('–ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç - —ç—Ç–æ –Ω–æ–≤—ã–π –∞–±–∑–∞—Ü.')
st.markdown("""\
## –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞ Markdown
            
–î–ª—è –≤—ã–≤–æ–¥–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —è–∑—ã–∫ Markdown. 
–≠—Ç–æ –ø–æ–∑–≤–ª—è–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å –Ω–∞ —ç–∫—Ä–∞–Ω —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞.
            
–ö–∞–∂–¥—ã–π –∞–±–∑–∞—Ü —Ä–∞–∑–¥–µ–ª—è–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π.
            
> –í–ê–ñ–ù–û! –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è Markdown —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫—É 
> —Ä–∞–∑–¥–µ–ª–∞ `st.header('–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞')`
            """) # see #*
st.caption("–≠–ª–µ–º–µ–Ω—Ç –ø–æ–¥–ø–∏—Å—å (st.caption('...'))")
st.latex(r''' e^{i\pi} + 1 = 0 ''')
–∏–º—è = "–ú–∏—à–∞"
st.write('–§—É–Ω–∫—Ü–∏—è `write` –º–æ–∂–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å –Ω–∞ —ç–∫—Ä–∞–Ω —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:') # df, err, func, keras!
st.write('–ò–º—è: ', –∏–º—è) # df, err, func, keras!
st.write(['st', 'is <', 3]) # see *
st.title('–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–≤–æ–º—É —É—Ä–æ–≤–Ω—é –∑–∞–≥–æ–ª–æ–≤–∫–∞ Markdown')
st.header('–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞')
st.subheader('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞')
st.code('for i in range(8): foo()')

# * optional kwarg unsafe_allow_html = True



st.header('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö')
# st.dataframe(my_dataframe)
# st.table(data.iloc[0:10])
st.json({'foo':'bar','fu':'ba'})
st.metric(label="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", value="273 ¬∞C", delta="1.2 ¬∞C")
st.metric(label="–ö—Ä–µ–π—Å–µ—Ä—Å–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å", value="280 –∫–º/—á", help="V–∫—Ä")



st.header('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤')
st.image('c:\\Users\\kotlyarov_m\\Documents\\MK\\files\\jpg\\–Ø –∫—É–¥–∞-—Ç–æ –Ω–∞–∂–∞–ª –∏ –≤—Å—ë —Å–ª–æ–º–∞–ª–æ—Å—å.jpg')
# st.audio(data)
# st.video(data)



st.header('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–∞–Ω–Ω—ã—Ö')
col1, col2 = st.columns(2)
col1.write('Column 1')
col2.write('Column 2')

# –¢—Ä–∏ —Å—Ç–æ–ª–±—Ü–∞ —Å —Ä–∞–∑–ª–∏—á–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π
col1, col2, col3 = st.columns([3,1,1],)
# col1 is wider

# Using 'with' notation:
with col1:
    st.write('–°—Ç–æ–ª–±–µ—Ü ‚Ññ 1')
    st.write('–î–∞–Ω–Ω—ã–µ —ç—Ç–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ —Ä–∞–∑–º–µ—â–∞—é—Ç—Å—è ',
             '–≤ –æ–±–ª–∞—Å—Ç–∏, –≤ —Ç—Ä–∏ —Ä–∞–∑–∞ –ø—Ä–µ–≤—ã—à–∞—é—â—É—é —à–∏—Ä–∏–Ω—É –¥–≤—É—Ö –¥—Ä—É–≥–∏—Ö ',
             '—Å—Ç–æ–ª–±—Ü–æ–≤')
with col2:
    st.write('–°—Ç–æ–ª–±–µ—Ü ‚Ññ 2')
with col3:
    st.write('–°—Ç–æ–ª–±–µ—Ü ‚Ññ 3')


st.header('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫')
# Insert containers separated into tabs:
tab1, tab2 = st.tabs(["–í–∫–ª–∞–¥–∫–∞ 1", "–í–∫–ª–∞–¥–∫–∞ 2"],)
tab1.write("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–∏")
# # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "with" –¥–ª—è :
with tab1:
  st.radio('–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ:', [1, 2])
tab2.write("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Ç–æ—Ä–æ–π –≤–∫–ª–∞–¥–∫–∏")
# 

with tab2:
  st.radio('–í—ã–±–µ—Ä–∏—Ç–µ –∏–º—è:', ["–ú–∏—à–∞", "–°–≤–µ—Ç–∞", "–ñ–µ–Ω—è", "–§–µ–¥—è"])


st.header('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞–º–∏')
# Stop execution immediately:
# st.stop()
# Rerun script immediately:
# st.experimental_rerun()

# Group multiple widgets:
# >>> with st.form(key='my_form'):
# >>>   username = st.text_input('Username')
# >>>   password = st.text_input('Password')
# >>>   st.form_submit_button('Login')



st.header('–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
# –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–¥—Ä–µ—Å–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
# >>> if st.user.email == 'jane@email.com':
# >>>    display_jane_content()
# >>> elif st.user.email == 'adam@foocorp.io':
# >>>    display_adam_content()
# >>> else:
# >>>    st.write("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º!")



st.header('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤')
st.button('–ù–∞–∂–∞—Ç—å!')
# st.data_editor('Edit data', data)
st.checkbox('Check me out')
st.radio('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:', ['–Å–∂–∏–∫–∏','–ë–æ–±—Ä—ã'])
–≤—ã–±–æ—Ä = st.selectbox('Select', [1,2,3])
–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π_–≤—ã–±–æ—Ä = st.multiselect('–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä', ["–ú–∏—à–∞","–°–≤–µ—Ç–∞","–ñ–µ–Ω—è", "–§—ë–¥–æ—Ä"])
print(–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π_–≤—ã–±–æ—Ä)
st.slider('–ü–µ—Ä–µ–¥–≤–∏–Ω—É—Ç—å –ø–æ–ª–∑—É–Ω–æ–∫ –Ω–∞ —Ç—Ä–µ–±—É–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', min_value=0, max_value=10)
st.select_slider('–°—Ç–∞–¥–∏–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞', options=[
   "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏",
   '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º', 
   "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —Å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º–∏",
   "–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞",
   "–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑—á–∏–∫—É",
   "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—á–∞–Ω–∏–π",
   "–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–æ–º",
   "–í–≤–æ–¥ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é"], value="–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—á–∞–Ω–∏–π")
st.text_input('–ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞', placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç")
st.number_input('–í–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è', help="–¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
st.text_area('–ü–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞', placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç")
st.date_input('–£–∫–∞–∂–∏—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É')
st.time_input('–£–∫–∞–∂–∏—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤—ã–ª–µ—Ç–∞')
st.file_uploader('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö',)
# st.download_button('On the dl', data)
st.camera_input("–í–Ω–∏–º–∞–Ω–∏–µ! –ú–æ—Ç–æ—Ä!")
st.color_picker('–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç')


# Use widgets' returned values in variables
# >>> for i in range(int(st.number_input('Num:'))): foo()
# >>> if st.sidebar.selectbox('I:',['f']) == 'f': b()
# >>> my_slider_val = st.slider('Quinn Mallory', 1, 88)
# >>> st.write(slider_val)



# Disable widgets to remove interactivity:
# >>> st.slider('Pick a number', 0, 100, disabled=True)



st.header('–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∞—Ç–∞')
# Insert a chat message container.
# >>> with st.chat_message("user"):
# >>>    st.write("Hello üëã")
# >>>    st.line_chart(np.random.randn(30, 3))
# 
# Display a chat input widget.
# >>> st.chat_input("Say something")



st.header('–ò–∑–º–µ–Ω—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ')
# Add rows to a dataframe after
# showing it.
# >>> element = st.dataframe(df1)
# >>> element.add_rows(df2)

# Add rows to a chart after
# showing it.
# >>> element = st.line_chart(df1)
# >>> element.add_rows(df2)



st.header('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–¥–∞')
# st.echo()
# >>> with st.echo():
# >>>     st.write('Code will be executed and printed')



st.header('–ü–æ–¥—Å–∫–∞–∑–∫–∏, –ø–æ–º–æ—â—å –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
# –ó–∞–º–µ–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
element = st.empty()
element.caption('–ü–æ–¥–ø–∏—Å—å')
time.sleep(2)
element.button("–ö–Ω–æ–ø–∫–∞")
# element.line_chart(...)
# element.text_input(...)  # Replaces previous.

# Insert out of order.
# >>> elements = st.container()
# >>> elements.line_chart(...)
# >>> st.write("Hello")
# >>> elements.text_input(...)  # Appears above "Hello".
# 
# st.help(pandas.DataFrame)
# st.get_option(key)
# st.set_option(key, value)
# st.set_page_config(layout='wide')
# st.experimental_show(objects)
# st.experimental_get_query_params()
# st.experimental_set_query_params(**params)



st.header('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º')
# st.experimental_connection('pets_db', type='sql')
# conn = st.experimental_connection('sql')
# conn = st.experimental_connection('snowpark')
# 
# >>> class MyConnection(ExperimentalBaseConnection[myconn.MyConnection]):
# >>>    def _connect(self, **kwargs) -> MyConnection:
# >>>        return myconn.connect(**self._secrets, **kwargs)
# >>>    def query(self, query):
# >>>       return self._instance.query(query)



st.header('–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è')
st.subheader('–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö')
# E.g. Dataframe computation, storing downloaded data, etc.
# >>> @st.cache_data
# ... def foo(bar):
# ...   # Do something expensive and return data
# ...   return data
# # Executes foo
# >>> d1 = foo(ref1)
# # Does not execute foo
# # Returns cached item by value, d1 == d2
# >>> d2 = foo(ref1)
# # Different arg, so function foo executes
# >>> d3 = foo(ref2)
# # Clear all cached entries for this function
# >>> foo.clear()
# # Clear values from *all* in-memory or on-disk cached functions
# >>> st.cache_data.clear()



st.subheader('–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤')
# E.g. TensorFlow session, database connection, etc.
# >>> @st.cache_resource
# ... def foo(bar):
# ...   # Create and return a non-data object
# ...   return session
# # Executes foo
# >>> s1 = foo(ref1)
# # Does not execute foo
# # Returns cached item by reference, s1 == s2
# >>> s2 = foo(ref1)
# # Different arg, so function foo executes
# >>> s3 = foo(ref2)
# # Clear all cached entries for this function
# >>> foo.clear()
# # Clear all global resources from cache
# >>> st.cache_resource.clear()



st.subheader('–£—Å—Ç–∞—Ä–µ–≤—à–µ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ')
# >>> @st.cache
# ... def foo(bar):
# ...   # Do something expensive in here...
# ...   return data
# >>> # Executes foo
# >>> d1 = foo(ref1)
# >>> # Does not execute foo
# >>> # Returns cached item by reference, d1 == d2
# >>> d2 = foo(ref1)
# >>> # Different arg, so function foo executes
# >>> d3 = foo(ref2)



st.header('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ —Å—Ç–∞—Ç—É—Å–∞')
# –ü–æ–∫–∞–∑ —Å–ø–∏–Ω–Ω–µ—Ä–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
with st.spinner(text='–í –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...'):
   time.sleep(3)
   st.success('–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', icon="‚úÖ")

# –ü–æ–∫–∞–∑ –ª–∏–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤
bar = st.progress(0)
time.sleep(1)
bar.progress(1, text="–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è...")
time.sleep(1)
bar.progress(20, text="–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è...")
time.sleep(1)
bar.progress(50, text="–ü—Ä–æ–¥—É–≤–∫–∞...")
time.sleep(1)
bar.progress(100, text="–í—ã–ø–æ–ª–Ω–µ–Ω–æ")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ–±–æ–∑—Ä–µ–≤–∞—Ç–µ–ª—è —à–∞—Ä–∏–∫–∏
# st.balloons()


# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ–±–æ–∑—Ä–µ–≤–∞—Ç–µ–ª—è —Å–Ω–µ–∂–∏–Ω–∫–∏
# st.snow()


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –≤ –Ω–∏–∂–Ω–µ–º –ø—Ä–∞–≤–æ–º —É–≥–ª—É –æ–±–æ–∑—Ä–µ–≤–∞—Ç–µ–ª—è
# st.toast('–§—É–Ω–∫—Ü–∏—è `st.toast` –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∞ —à—Ç–∞—Ç–Ω–æ!')

st.header('–ü–æ–ª—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —ç–∫—Ä–∞–Ω')
st.error('–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ', icon="üö®")
st.warning('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–∏–∏', icon="‚ö†Ô∏è")
st.info('–í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', icon="‚ÑπÔ∏è")
st.success('–°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã', icon="‚úÖ")
e = RuntimeError('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!')
st.exception(e)
