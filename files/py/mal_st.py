import streamlit as st
from функции import *
from классы import *
from перечни import *


if "радиус_зоны_ответственности" not in st.session_state:
    st.session_state["радиус_зоны_ответственности"] = 1000

if "радиус_зоны_агломерации" not in st.session_state:
    st.session_state["радиус_зоны_агломерации"] = 100

if "аэродром" not in st.session_state:
    st.session_state["аэродром"] = "UNWW | NOZ | Новокузнецк | Спиченково"

if "аэропорты" not in st.session_state:
    st.session_state["аэропорты"] = перечень_МАЛ


st.session_state["аэродром"] = st.sidebar.selectbox("Аэродром",options=перечень_МАЛ)
аэродром = st.session_state["аэродром"]

with st.sidebar.expander('Расчётные значения'):
    st.session_state["радиус_зоны_агломерации"] = st.number_input(
        "Радиус агломерации, км",
        min_value=100, max_value=100,
        value=st.session_state["радиус_зоны_агломерации"],
        help="Значение определяет радиус круга с центром в контрольной точке аэродрома, который ограничивает количество населённых пунктов, население которых учитывается при подсчёте количества жителей, проживающих в районе аэропорта")
    
    st.session_state["радиус_зоны_ответственности"] = st.number_input(
        "Радиус доступности, км",
        min_value=1000, max_value=1000,
        value=int(st.session_state["радиус_зоны_ответственности"]))

    
    
st.title(аэродром)
st.divider()

агломерация = Агломерация(
    аэродром=аэродром[:4], 
    радиус=st.session_state["радиус_зоны_агломерации"])

РЗА = st.session_state["радиус_зоны_агломерации"]
st.write(f"Агломерация населения в радиусе {РЗА} км от контрольной точки аэродрома составляет {агломерация} жителей.")

try:
    st.write("Города и населённые пункты в районе аэропорта, а также геодезические расстояния и количество жителей представлены в таблице 1")

    города = read_csv('../csv/Города/'+аэродром[:4]+'_перечень_городов.csv')

    st.caption(f"Таблица 1 - Города в районе аэропорта {аэродром}")
    st.write(города)
except:
    ...
finally:
    ...

подвижность = АПН(аэродром=аэродром[:4])
st.write(f"Расчётный показатель авиационной подвижности населения для аэродрома {аэродром} имеет значение {подвижность}.")

расчётный_пассажиропоток = int(агломерация * подвижность)
st.write(f"Расчётный годовой пассажиропоток для аэропорта {аэродром} составляет {расчётный_пассажиропоток} пассажиров. Значение расчётного ежедневного пассажиропотока составляет {int(расчётный_пассажиропоток/365)} пассажиров в сутки.")

if АН(аэродром[:4]):
    st.write(f"Аэропорт {аэродром} в терминологии проекта МАЛ является аэропортом назначения.")
elif УА(аэродром[:4]):
    st.write(f"Аэропорт {аэродром} в терминологии проекта МАЛ является узловым аэропортом.")
else: st.write("Тип аэропорта не определён")

аэропорты = read_csv('../csv/Аэродромы/'+аэродром[:4]+'_1000_перечень_аэродромов.csv', index_col='ICAO')

st.write(f"Перечень аэропортов, расположенных в зоне полётной доступности из аэропорта {аэродром} представлен в таблице 2")

st.caption(f"Таблица 2 - Аэропорты в зоне {аэродром}")
st.write(аэропорты)

if АН(аэродром[:4]):
    st.write(f"Для аэропорта {аэродром}, поскольку он является аэропортом назначения, основным расчётным направлением ежедневных регулярных рейсов определяется ближайший узловой аэропорт. Расчёты других маршрутов регулярных рейсов производятся индивидуально для каждого направления с учётом рекомендаций руководителей муниципальных образований.")
elif УА(аэродром[:4]):
    st.write(f"Пассажиропоток аэропорта {аэродром} распределяется между соседними узловными аэропортами, себестоимость выполнения не менее двух ежедневных парных рейсов которых ниже расчётных поступлений денежных средств каждого направления.")
else: ...

