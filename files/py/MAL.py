from pandas import read_csv
from collections import namedtuple
from configparser import ConfigParser
from datetime import timedelta, time

КТА = namedtuple('КТА', 'широта долгота превышение')

ВПП = namedtuple('ВПП', 'длина ширина тип курс освещение')

# Беспосадочный маршрут
БПМ = namedtuple('Маршрут', 'откуда куда дистанция')

class Я:
	def __init__(я, *СЧ, **РЧ):
		я.__СЧ = СЧ
		я.__РЧ = РЧ
	
	@property
	def СЧ(я): return я.__СЧ

		
	@property
	def РЧ(я): return я.__РЧ

class А(Я):
	'''
	Класс АЭРОДРОМ
	При создании экземпляра класса требуется
	обязательный ввод значения кода ИКАО аэродрома
	Пример: NOZ = А('UNWW')
	'''
	@property
	def ICAO(я):
		try: возврат = я.СЧ[0].upper()
		except:
			print('ОШИБКА! Нет информации о коде ИКАО')
			возврат = None
		return возврат
	
	@property
	def IATA(я):
		'''
		Свойство возвращает код ИАТА аэропорта или None, когда для указанного кода ИКАО 
		аэродрома не найден соответствующий код ИАТА 
		аэропорта. 
		Тип: 			str
		'''
		try:
			f = read_csv('../csv/IATA.csv', index_col='icao')
			возврат = f.loc[я.ICAO]['iata']
		except: 
			print('ОШИБКА! Не найдено соответствие кодов ИКАО и ИАТА')
			возврат = None
		finally: return возврат
	
	@property
	def КТА(я):
		'''
		Свойство возвращает координаты и высоту КТА аэродрома
		Тип: 			namedtuple('КТА' 'широта долгота превышение')
		'''
		try:
			f = read_csv('../csv/aopa-points-export.csv', sep=';', index_col='Индекс')
			возврат = КТА(
				f.loc[я.ICAO]['Широта КТА'],
				f.loc[я.ICAO]['Долгота КТА'],
				f.loc[я.ICAO]['Превышение'])
		except: 
			print('ОШИБКА! Не найден код ИКАО в перечне аэродромов АОПА')
			возврат = None
		finally: return возврат
	
	@property
	def ВПП(я):
		'''
		Свойство возвращает характеристики основной взлётно-посадочной полосы аэродрома
		Тип: 			namedtuple('ВПП', 'длина ширина тип курс освещение')
		'''
		try:
			f = read_csv('../csv/aopa-points-export.csv', sep=';', index_col='Индекс')
			возврат = ВПП(
				f.loc[я.ICAO]['Длина основной ВПП'],
				f.loc[я.ICAO]['Ширина основной ВПП'],
				f.loc[я.ICAO]['Покрытие основной ВПП'],
				f.loc[я.ICAO]['Магнитный курс основной ВПП'],
				f.loc[я.ICAO]['Освещение основной ВПП'])
		except: 
			print('ОШИБКА! Не найден код ИКАО в перечне аэродромов АОПА')
			возврат = None
		finally: return возврат
	
	@property
	def Примечание(я):
		'''
		Свойство возвращает дополнительную информацию по аэродрому
		Тип: 			str
		'''
		try:
			f = read_csv('../csv/aopa-points-export.csv', sep=';', index_col='Индекс')
			возврат = f.loc[я.ICAO]['Примечание']
		except: 
			print('ОШИБКА! Не найден код ИКАО в перечне аэродромов АОПА')
			возврат = None
		finally: return возврат
	
	@property
	def Электропочта(я):
		'''
		Свойство возвращает адрес электронной почты аэродрома
		Тип: 			str
		'''
		try:
			f = read_csv('../csv/aopa-points-export.csv', sep=';', index_col='Индекс')
			возврат = f.loc[я.ICAO]['Email']
		except: 
			print('ОШИБКА! Не найден код ИКАО в перечне аэродромов АОПА')
			возврат = None
		finally: return возврат
	
	@property
	def Город(я):
		'''
		Свойство возвращает регион аэродрома
		Тип: 			str
		'''
		try:
			f = read_csv('../csv/aopa-points-export.csv', sep=';', index_col='Индекс')
			возврат = f.loc[я.ICAO]['Город']
		except: 
			print('ОШИБКА! Не найден код ИКАО в перечне аэродромов АОПА')
			возврат = None
		finally: return возврат
	
	@property
	def Название(я):
		'''
		Свойство возвращает регион аэродрома
		Тип: 			str
		'''
		try:
			f = read_csv('../csv/aopa-points-export.csv', sep=';', index_col='Индекс')
			возврат = f.loc[я.ICAO]['Название']
		except: 
			print('ОШИБКА! Не найден код ИКАО в перечне аэродромов АОПА')
			возврат = None
		finally: return возврат
	
	@property
	def Действующий(я):
		'''
		Свойство возвращает True или False
		Тип: 			bool
		'''
		try:
			f = read_csv('../csv/aopa-points-export.csv', sep=';', index_col='Индекс')
			возврат = True if f.loc[я.ICAO]['Действующий'] == 'Действующий' else False
		except: 
			print('ОШИБКА! Не найден код ИКАО в перечне аэродромов АОПА')
			возврат = None
		finally: return возврат
	
	@property
	def Тип(я):
		'''
		Свойство возвращает регион аэродрома
		Тип: 			str
		'''
		try:
			f = read_csv('../csv/aopa-points-export.csv', sep=';', index_col='Индекс')
			возврат = f.loc[я.ICAO]['Тип']
		except: 
			print('ОШИБКА! Не найден код ИКАО в перечне аэродромов АОПА')
			возврат = None
		finally: return возврат
	
	@property
	def Направления(я):
		'''
		Свойство возвращает список аэродромов в радиусе зоны влияния аэродрома
		Тип: 			list
		'''
		возврат = []
		try:
			f = read_csv('../csv/FTD.csv', index_col='FT')
			for _ in f.index:
				FT = я.ICAO+_[4:]
				if (FT == _ )and (f.loc[FT]['D'] < 1000):
					возврат.append(БПМ(я.ICAO, _[4:], f.loc[FT]['D']))
		except: 
			print('ОШИБКА! Не найден файл дистанций')
		finally: return возврат
	
	@property
	def СПП(я):
		'''
		СПП - Существующий пассажиропоток
		Свойство возвращает значение текущего пассажиропотока из аэропорта
		Тип: 			float
		'''
		try:
			f = read_csv('../csv/Сводка.csv', index_col='ICAO')
			возврат = f.loc[я.ICAO]['Пассажиропоток']
		except: 
			print('ОШИБКА! Не найден файл Сводка.csv')
			возврат = None
		finally: return возврат
	
	@property
	def СГП(я):
		'''
		СГП - Существующий грузопотокоток
		Свойство возвращает значение текущего грузопотока из аэропорта
		Тип: 			float
		'''
		try:
			f = read_csv('../csv/Сводка.csv', index_col='ICAO')
			возврат = f.loc[я.ICAO]['Груз, тонн']
		except: 
			print('ОШИБКА! Не найден файл Сводка.csv')
			возврат = None
		finally: return возврат
		
	@property
	def СПО(я):
		'''
		СПО - Существующий потокоток почтовых отправдений
		Свойство возвращает значение текущей отправки почтв из аэропорта
		Тип: 			float
		'''
		try:
			f = read_csv('../csv/Сводка.csv', index_col='ICAO')
			возврат = f.loc[я.ICAO]['Почта, тонн']
		except: 
			print('ОШИБКА! Не найден файл Сводка.csv')
			возврат = None
		finally: return возврат
		
	@property
	def ТС(я):
		'''
		ТС - Стоимость ТС-1 в аэропорте
		Свойство возвращает значение текущей стоимости ТС-1 в аэропорте. Если 0 - заправка отсутствует
		Тип: 			float
		'''
		try:
			f = read_csv('../csv/Сводка.csv', index_col='ICAO')
			возврат = f.loc[я.ICAO]['Цена ТС-1, руб']
		except: 
			print('ОШИБКА! Не найден файл Сводка.csv')
			возврат = None
		finally: return возврат
	
	@property
	def Категория(я):
		'''
		Свойство возвращает категорию аэродрома в терминологии проекта МАЛ.
		Возвращаемые значения:
			- 1 (возможна эксплуатация всех расчётных типов проекта);
			- 2 (возможна эксплуатация ТВРС-44 и ЛМС-901);
			- 3 (возможна эксплуатация ЛМС-901);
			- 0 (нет технической возможности эксплуатации ВС расчётных типов)
		Тип: 			float
		'''
		try:
			f = read_csv('../csv/Сводка.csv', index_col='ICAO')
			возврат = int(f.loc[я.ICAO]['Категория'])
		except: 
			print('ОШИБКА! Не найден файл Сводка.csv')
			возврат = None
		finally: return возврат
	
	@property
	def Заправка(я):
		'''
		Свойство возвращает True если заправка есть и False, если заправка в аэропорте не производится
		Тип: 			bool
		'''
		if int(я.ТС): return  True
		else: return False
		
	@property
	def Узловой(я):
		'''
		Свойство возвращает True когда аэропорт узловой. В другом случае - False 
		Тип: 			bool
		'''
		f = read_csv('../csv/Сводка.csv', index_col='ICAO')
		if f.loc[я.ICAO]['Вид'] == 'УА': return True
		else: return False
	
	@property
	def Кандидат(я):
		'''
		Свойство возвращает True при наличии технической возможности использования аэропорта в качестве опорного аэродрома проекта. В другом случае - False 
		Тип: 			bool
		'''
		f = read_csv('../csv/Сводка.csv', index_col='ICAO')
		if f.loc[я.ICAO]['Вид'] == 'УА': return True
		else: return False
		
	@property
	def Агломерация(я):
		'''
		Свойство возвращает значение агломерации населения в районе аэродрома
		Тип: 			int
		'''
		try:
			f = read_csv('../csv/Агломерация.csv', index_col='ICAO')
			возврат = f.loc[я.ICAO]['Агломерация']
		except: 
			print('ОШИБКА! Не найден файл Агломерация.csv')
			возврат = None
		finally: return возврат
	
	@property
	def МВПП(я):
		'''
		МВПП - маскимально возможный пассажиропоток аэропорта
		Свойство возвращает значение максимально возможного пассажиропотока.
		Расчёт значения производится по формуле:
			МВПП = Капа * Ан,
			где
				Капа 	- коэффициент авиационной подвижности населения для данного вида
								аэродрома. Для узлового аэропорта коэффициент равен 2.5.
								Для аэропорта назначения - 4.2 (см. исходные данныые ini-файла)
				Ан		- Агломерация населения
		В том случае, когда значение агломерации населения не опрелено (равно нулю),
		максимально возможный пассажиропоток определяется как произведение пассажирской
		вместимости самолёта ЛМС-901 на количество дней в календарном году.
		
		Тип: 			int
		'''
		try:
			f = read_csv('../csv/Агломерация.csv', index_col='ICAO')
			i = ConfigParser()
			i.read('../ini/МАЛ.ini', encoding='utf8')
			if я.Узловой: возврат = int(f.loc[я.ICAO]['Агломерация'] * float(i['Коэффициенты авиационной подвижности населения']['Средний']))
			else: возврат = int(f.loc[я.ICAO]['Агломерация'] * float(i['Коэффициенты авиационной подвижности населения']['Максимальный']))
			if not возврат: возврат = int(9 * 365)
		except: 
			print('ОШИБКА! Проверить файлы Агломерация.csv и МАЛ.ini')
			возврат = None
		finally: return возврат
		
	@property
	def МВКРИЛ(я):
		'''
		МВКРИЛ - маскимально возможное количество рейсов самолёта Ил-114-300 
		из аэропорта при расчётном значениии МВПП
		Свойство возвращает значение максимально возможное ежедневное количество
		рейсов для самолёта Ил-114-300 при расчётном значении МВПП
		Расчёт значения производится по формуле:
			МВКРИЛ = (МВПП - я.СПП)/ (Кпк * 365) ,
			где
				Кпк 	- Количество пассажирских кресел в самолёте Ил-114-300
				МВПП	- Максимально возможное годовое значение пассажиропотока из аэропорта
		
		Тип: 			int
		'''
		return int((я.МВПП - я.СПП) / (68 * 365))
	
	@property
	def МВКРТВРС(я):
		'''
		МВКРТВРС - маскимально возможное количество рейсов самолёта ТВРС-44 "Ладога" 
		из аэропорта при расчётном значениии МВПП
		Свойство возвращает значение максимально возможное ежедневное количество
		рейсов для самолёта ТВРС-44 "Ладога" при расчётном значении МВПП
		Расчёт значения производится по формуле:
			МВКРИЛ = (МВПП - я.СПП)/ (Кпк * 365) ,
			где
				Кпк 	- Количество пассажирских кресел в самолёте ТВРС-44 "Ладога"
				МВПП	- Максимально возможное годовое значение пассажиропотока из аэропорта
		
		Тип: 			int
		'''
		return int((я.МВПП - я.СПП) / (44 * 365))
	
	@property
	def МВКРЛМС(я):
		'''
		МВКРЛМС - маскимально возможное количество рейсов самолёта ЛМС-901 "Байкал" 
		из аэропорта при расчётном значениии МВПП
		Свойство возвращает значение максимально возможное ежедневное количество
		рейсов для самолёта ЛМС-901 "Байкал" при расчётном значении МВПП
		Расчёт значения производится по формуле:
			МВКРИЛ = (МВПП - я.СПП)/ (Кпк * 365) ,
			где
				Кпк 	- Количество пассажирских кресел в самолёте ЛМС-901 "Байкал"
				МВПП	- Максимально возможное годовое значение пассажиропотока из аэропорта
		
		Тип: 			int
		'''
		return int((я.МВПП - я.СПП) / (9 * 365))
	
	@property
	def МВКРОАЭ(я):
		'''
		МВКРОАЭ - маскимально возможное количество рейсов самолётов объединённой авиационной эскадрильи из аэропорта при расчётном значениии МВПП
		Свойство возвращает значение максимально возможное ежедневное количество
		рейсов для самолётов ОАЭ (3 ВС каждого типа) при расчётном значении МВПП
		Расчёт значения производится по формуле:
			МВКРИЛ = (МВПП - я.СПП)/ (Кпк * 365) ,
			где
				Кпк 	- Количество пассажирских кресел в самолётах ОАЭ I-III этапов
				МВПП	- Максимально возможное годовое значение пассажиропотока из аэропорта
		
		Тип: 			int
		'''
		return int((я.МВПП - я.СПП) / ((9 + 44 + 68) * 365))
	
	@property
	def Капн(я):
		'''
		Свойство возвращает коэффициент авиационной подвижности населения для данного аэропорта. Коэффициент определяется как средний (2.5) для узловых аэропортов (в терминологии Транспортной стратегии Российской Федерации) или максимальный (4.2) для аэродромов (аэропортов) обеспечения транспортной доступности, расположенных в удалённых и труднодоступных районах Российской Федерации, согласно Приложению № 7 к Распоряжению Правительства РФ от 27 ноября 2021 года № 3363-р
		'''
		try:
			f = read_csv('../csv/Сводка.csv', index_col='ICAO')
			i = ConfigParser()
			i.read('../ini/МАЛ.ini', encoding='utf8')
			if я.Узловой: возврат = float(i['Коэффициенты авиационной подвижности населения']['Средний'])
			else: возврат = float(i['Коэффициенты авиационной подвижности населения']['Максимальный'])
		except:
			print('ОШИБКА! Проверить файлы Сводка.csv и МАЛ.ini')
			возврат = None
		finally: return возврат

class С(Я):
	"""
	Класс С (САМОЛЁТ) обеспечивает хранение и применение свойств самолётов.
	При создании экземпляра класса необходимо вводить следующие возможные значения:
		- Ил-114-300
		- ТВРС-44
		- ЛМС-901
		- L410 UVP-E20
		- Ан-24
		- Ан-26
		- Ан-38
		- Як-40
		- EMB120ER
		- EMB135
		- EMB145
		- CRJ-100
		- CRJ-200
		- ATR-42
		- DASH-8
		- Ту-134
		- Ан-148-1
		- EMB170
		- DASH8-300
		- DASH8-400
		- ATR-72
		- SSJ-100
	"""
	@property
	def Тип(я):
		try:
			i = ConfigParser()
			i.read('../ini/МАЛ.ini', encoding='utf8')
			возврат = я.СЧ[0] if i['ЛТХ ' + я.СЧ[0]] else None
		except: 
			print('ОШИБКА! Проверить наличие данных по типу в файле МАЛ.ini')
			возврат = None
		finally: return возврат
	
	@property
	def КС(я):
		"""
		Крейсерская скорость в км/час
		Тип:	int
		"""
		try:
			i = ConfigParser()
			i.read('../ini/МАЛ.ini', encoding='utf8')
			возврат = int(i['ЛТХ ' + я.СЧ[0]]['Крейсерская скорость, км/ч'])
		except: 
			print('ОШИБКА! Проверить наличие данных по типу в файле МАЛ.ini')
			возврат = None
		finally: return возврат
	
	@property
	def МВМ(я):
		"""
		Максимальная взлётная масса в тоннах
		Тип:	float
		"""
		try:
			i = ConfigParser()
			i.read('../ini/МАЛ.ini', encoding='utf8')
			возврат = float(i['ЛТХ ' + я.СЧ[0]]['Максимальная взлётная масса, т'])
		except: 
			print('ОШИБКА! Проверить наличие данных по типу в файле МАЛ.ini')
			возврат = None
		finally: return возврат
		
	@property
	def СЧР(я):
		"""
		Средний часовой расход, кг/лч
		Тип:	float
		"""
		try:
			i = ConfigParser()
			i.read('../ini/МАЛ.ini', encoding='utf8')
			возврат = float(i['ЛТХ ' + я.СЧ[0]]['Расход ТС-1, кг/лётный час'])
		except: 
			print('ОШИБКА! Проверить наличие данных по типу в файле МАЛ.ini')
			возврат = None
		finally: return возврат
	
	@property
	def КПК(я):
		"""
		Количество пассажирских кресел пассажирского салона, шт
		Тип:	int
		"""
		try:
			i = ConfigParser()
			i.read('../ini/МАЛ.ini', encoding='utf8')
			возврат = int(i['ЛТХ ' + я.СЧ[0]]['Пассажиров, чел'])
		except: 
			print('ОШИБКА! Проверить наличие данных по типу в файле МАЛ.ini')
			возврат = None
		finally: return возврат
	
	@property
	def Ресурс(я):
		"""
		Полный ресурс самолёта, лч
		Тип:	timedelta
		"""
		try:
			i = ConfigParser()
			i.read('../ini/МАЛ.ini', encoding='utf8')
			возврат = timedelta(seconds = int(i['ЛТХ ' + я.СЧ[0]]['Полный ресурс, лч'])*3600)
		except: 
			print('ОШИБКА! Проверить наличие данных по типу в файле МАЛ.ini')
			возврат = None
		finally: return возврат
	
	@property
	def МРРП(я):
		"""
		Межремонтный ресурс планера, лч
		Тип:	timedelta
		"""
		try:
			i = ConfigParser()
			i.read('../ini/МАЛ.ini', encoding='utf8')
			возврат = timedelta(seconds = int(i['ЛТХ ' + я.СЧ[0]]['Межремонтный ресурс планера, лч'])*3600)
		except: 
			print('ОШИБКА! Проверить наличие данных по типу в файле МАЛ.ini')
			возврат = None
		finally: return возврат
	
	@property
	def МРРД(я):
		"""
		Межремонтный ресурс двигателей, лч
		Тип:	timedelta
		"""
		try:
			i = ConfigParser()
			i.read('../ini/МАЛ.ini', encoding='utf8')
			возврат = timedelta(seconds = int(i['ЛТХ ' + я.СЧ[0]]['Межремонтный ресурс двигателей, лч'])*3600)
		except: 
			print('ОШИБКА! Проверить наличие данных по типу в файле МАЛ.ini')
			возврат = None
		finally: return возврат